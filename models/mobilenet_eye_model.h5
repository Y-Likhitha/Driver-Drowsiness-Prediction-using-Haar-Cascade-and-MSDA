import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
import os

#**1️⃣ Set Dataset Paths**
dataset_path = "models\dataset_new/"  # Change this to your dataset folder
train_dir = os.path.join(dataset_path, "train")
val_dir = os.path.join(dataset_path, "val")

# **2️⃣ Define Image Data Generators (With Augmentation)**
image_size = (96, 96)
batch_size = 32

train_datagen = ImageDataGenerator(
    rescale=1.0 / 255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode="nearest",
)

val_datagen = ImageDataGenerator(rescale=1.0 / 255)

train_generator = train_datagen.flow_from_directory(
    train_dir, target_size=image_size, batch_size=batch_size, class_mode="binary"
)

val_generator = val_datagen.flow_from_directory(
    val_dir, target_size=image_size, batch_size=batch_size, class_mode="binary"
)

# **3️⃣ Load Pretrained MobileNetV2 (Feature Extraction)**
base_model = MobileNetV2(weights="imagenet", include_top=False, input_shape=(96, 96, 3))

# Freeze base model layers
for layer in base_model.layers:
    layer.trainable = False

# **4️⃣ Add Custom Layers for Classification**
x = base_model.output
x = Flatten()(x)
x = Dense(128, activation="relu")(x)
x = Dropout(0.5)(x)
x = Dense(64, activation="relu")(x)
x = Dropout(0.5)(x)
output_layer = Dense(1, activation="sigmoid")  # Binary classification (open/closed eyes)

# **5️⃣ Build & Compile the Model**
model = Model(inputs=base_model.input, outputs=output_layer)
model.compile(optimizer=Adam(learning_rate=0.0001), loss="binary_crossentropy", metrics=["accuracy"])

# **6️⃣ Train the Model**
epochs = 10  # You can increase this for better accuracy
model.fit(train_generator, validation_data=val_generator, epochs=epochs, verbose=1)

# **7️⃣ Save the Model**
model.save("mobilenet_eye_model.h5")
print("✅ Model saved as mobilenet_eye_model.h5")
